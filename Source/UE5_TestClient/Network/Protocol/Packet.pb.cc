// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocol {
PROTOBUF_CONSTEXPR C_JOIN::C_JOIN(
    ::_pbi::ConstantInitialized) {}
struct C_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_JOINDefaultTypeInternal() {}
  union {
    C_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_JOINDefaultTypeInternal _C_JOIN_default_instance_;
PROTOBUF_CONSTEXPR S_JOIN::S_JOIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_JOINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_JOINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_JOINDefaultTypeInternal() {}
  union {
    S_JOIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_JOINDefaultTypeInternal _S_JOIN_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE::C_LEAVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVEDefaultTypeInternal() {}
  union {
    C_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVEDefaultTypeInternal _C_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE::S_LEAVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVEDefaultTypeInternal() {}
  union {
    S_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVEDefaultTypeInternal _S_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_)*/nullptr
  , /*decltype(_impl_.rotate_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_)*/nullptr
  , /*decltype(_impl_.rotate_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
}  // namespace protocol
static ::_pb::Metadata file_level_metadata_Packet_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const uint32_t TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_JOIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::S_JOIN, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::C_LEAVE, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::S_LEAVE, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::C_MOVE, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::protocol::C_MOVE, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::protocol::C_MOVE, _impl_.rotate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocol::S_MOVE, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::protocol::S_MOVE, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::protocol::S_MOVE, _impl_.rotate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocol::C_JOIN)},
  { 6, -1, -1, sizeof(::protocol::S_JOIN)},
  { 13, -1, -1, sizeof(::protocol::C_LEAVE)},
  { 20, -1, -1, sizeof(::protocol::S_LEAVE)},
  { 27, -1, -1, sizeof(::protocol::C_MOVE)},
  { 36, -1, -1, sizeof(::protocol::S_MOVE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocol::_C_JOIN_default_instance_._instance,
  &::protocol::_S_JOIN_default_instance_._instance,
  &::protocol::_C_LEAVE_default_instance_._instance,
  &::protocol::_S_LEAVE_default_instance_._instance,
  &::protocol::_C_MOVE_default_instance_._instance,
  &::protocol::_S_MOVE_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\010protocol\032\nEnum.proto\032\014St"
  "ruct.proto\"\010\n\006C_JOIN\"\024\n\006S_JOIN\022\n\n\002id\030\001 \001"
  "(\005\"\025\n\007C_LEAVE\022\n\n\002id\030\001 \001(\005\"\025\n\007S_LEAVE\022\n\n\002"
  "id\030\001 \001(\005\"X\n\006C_MOVE\022\n\n\002id\030\001 \001(\005\022 \n\006vector"
  "\030\002 \001(\0132\020.protocol.Vector\022 \n\006rotate\030\003 \001(\013"
  "2\020.protocol.Rotate\"X\n\006S_MOVE\022\n\n\002id\030\001 \001(\005"
  "\022 \n\006vector\030\002 \001(\0132\020.protocol.Vector\022 \n\006ro"
  "tate\030\003 \001(\0132\020.protocol.Rotateb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Packet_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Packet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_2eproto = {
    false, false, 316, descriptor_table_protodef_Packet_2eproto,
    "Packet.proto",
    &descriptor_table_Packet_2eproto_once, descriptor_table_Packet_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
    file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto,
    file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_2eproto_getter() {
  return &descriptor_table_Packet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace protocol {

// ===================================================================

class C_JOIN::_Internal {
 public:
};

C_JOIN::C_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protocol.C_JOIN)
}
C_JOIN::C_JOIN(const C_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_JOIN* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.C_JOIN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_JOIN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[0]);
}

// ===================================================================

class S_JOIN::_Internal {
 public:
};

S_JOIN::S_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.S_JOIN)
}
S_JOIN::S_JOIN(const S_JOIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_JOIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.S_JOIN)
}

inline void S_JOIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_JOIN::~S_JOIN() {
  // @@protoc_insertion_point(destructor:protocol.S_JOIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_JOIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_JOIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_JOIN::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_JOIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_JOIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_JOIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_JOIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_JOIN)
  return target;
}

size_t S_JOIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_JOIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_JOIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_JOIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_JOIN::GetClassData() const { return &_class_data_; }


void S_JOIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_JOIN*>(&to_msg);
  auto& from = static_cast<const S_JOIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_JOIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_JOIN::CopyFrom(const S_JOIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_JOIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_JOIN::IsInitialized() const {
  return true;
}

void S_JOIN::InternalSwap(S_JOIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_JOIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[1]);
}

// ===================================================================

class C_LEAVE::_Internal {
 public:
};

C_LEAVE::C_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.C_LEAVE)
}
C_LEAVE::C_LEAVE(const C_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LEAVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.C_LEAVE)
}

inline void C_LEAVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_LEAVE::~C_LEAVE() {
  // @@protoc_insertion_point(destructor:protocol.C_LEAVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LEAVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.C_LEAVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LEAVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LEAVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.C_LEAVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.C_LEAVE)
  return target;
}

size_t C_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.C_LEAVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LEAVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE::GetClassData() const { return &_class_data_; }


void C_LEAVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LEAVE*>(&to_msg);
  auto& from = static_cast<const C_LEAVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.C_LEAVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LEAVE::CopyFrom(const C_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.C_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LEAVE::IsInitialized() const {
  return true;
}

void C_LEAVE::InternalSwap(C_LEAVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[2]);
}

// ===================================================================

class S_LEAVE::_Internal {
 public:
};

S_LEAVE::S_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.S_LEAVE)
}
S_LEAVE::S_LEAVE(const S_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LEAVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.S_LEAVE)
}

inline void S_LEAVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LEAVE::~S_LEAVE() {
  // @@protoc_insertion_point(destructor:protocol.S_LEAVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LEAVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_LEAVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEAVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LEAVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_LEAVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_LEAVE)
  return target;
}

size_t S_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_LEAVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LEAVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE::GetClassData() const { return &_class_data_; }


void S_LEAVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LEAVE*>(&to_msg);
  auto& from = static_cast<const S_LEAVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_LEAVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LEAVE::CopyFrom(const S_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEAVE::IsInitialized() const {
  return true;
}

void S_LEAVE::InternalSwap(S_LEAVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[3]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::protocol::Vector& vector(const C_MOVE* msg);
  static const ::protocol::Rotate& rotate(const C_MOVE* msg);
};

const ::protocol::Vector&
C_MOVE::_Internal::vector(const C_MOVE* msg) {
  return *msg->_impl_.vector_;
}
const ::protocol::Rotate&
C_MOVE::_Internal::rotate(const C_MOVE* msg) {
  return *msg->_impl_.rotate_;
}
void C_MOVE::clear_vector() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
}
void C_MOVE::clear_rotate() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotate_ != nullptr) {
    delete _impl_.rotate_;
  }
  _impl_.rotate_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.rotate_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    _this->_impl_.vector_ = new ::protocol::Vector(*from._impl_.vector_);
  }
  if (from._internal_has_rotate()) {
    _this->_impl_.rotate_ = new ::protocol::Rotate(*from._impl_.rotate_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.C_MOVE)
}

inline void C_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.rotate_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:protocol.C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vector_;
  if (this != internal_default_instance()) delete _impl_.rotate_;
}

void C_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotate_ != nullptr) {
    delete _impl_.rotate_;
  }
  _impl_.rotate_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Vector vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Rotate rotate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .protocol.Vector vector = 2;
  if (this->_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // .protocol.Rotate rotate = 3;
  if (this->_internal_has_rotate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotate(this),
        _Internal::rotate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Vector vector = 2;
  if (this->_internal_has_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vector_);
  }

  // .protocol.Rotate rotate = 3;
  if (this->_internal_has_rotate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotate_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }


void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MOVE*>(&to_msg);
  auto& from = static_cast<const C_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _this->_internal_mutable_vector()->::protocol::Vector::MergeFrom(
        from._internal_vector());
  }
  if (from._internal_has_rotate()) {
    _this->_internal_mutable_rotate()->::protocol::Rotate::MergeFrom(
        from._internal_rotate());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MOVE, _impl_.id_)
      + sizeof(C_MOVE::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(C_MOVE, _impl_.vector_)>(
          reinterpret_cast<char*>(&_impl_.vector_),
          reinterpret_cast<char*>(&other->_impl_.vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[4]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::protocol::Vector& vector(const S_MOVE* msg);
  static const ::protocol::Rotate& rotate(const S_MOVE* msg);
};

const ::protocol::Vector&
S_MOVE::_Internal::vector(const S_MOVE* msg) {
  return *msg->_impl_.vector_;
}
const ::protocol::Rotate&
S_MOVE::_Internal::rotate(const S_MOVE* msg) {
  return *msg->_impl_.rotate_;
}
void S_MOVE::clear_vector() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
}
void S_MOVE::clear_rotate() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotate_ != nullptr) {
    delete _impl_.rotate_;
  }
  _impl_.rotate_ = nullptr;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.rotate_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vector()) {
    _this->_impl_.vector_ = new ::protocol::Vector(*from._impl_.vector_);
  }
  if (from._internal_has_rotate()) {
    _this->_impl_.rotate_ = new ::protocol::Rotate(*from._impl_.rotate_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:protocol.S_MOVE)
}

inline void S_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){nullptr}
    , decltype(_impl_.rotate_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:protocol.S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vector_;
  if (this != internal_default_instance()) delete _impl_.rotate_;
}

void S_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotate_ != nullptr) {
    delete _impl_.rotate_;
  }
  _impl_.rotate_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Vector vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocol.Rotate rotate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .protocol.Vector vector = 2;
  if (this->_internal_has_vector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vector(this),
        _Internal::vector(this).GetCachedSize(), target, stream);
  }

  // .protocol.Rotate rotate = 3;
  if (this->_internal_has_rotate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotate(this),
        _Internal::rotate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Vector vector = 2;
  if (this->_internal_has_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vector_);
  }

  // .protocol.Rotate rotate = 3;
  if (this->_internal_has_rotate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotate_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }


void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MOVE*>(&to_msg);
  auto& from = static_cast<const S_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vector()) {
    _this->_internal_mutable_vector()->::protocol::Vector::MergeFrom(
        from._internal_vector());
  }
  if (from._internal_has_rotate()) {
    _this->_internal_mutable_rotate()->::protocol::Rotate::MergeFrom(
        from._internal_rotate());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVE, _impl_.id_)
      + sizeof(S_MOVE::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(S_MOVE, _impl_.vector_)>(
          reinterpret_cast<char*>(&_impl_.vector_),
          reinterpret_cast<char*>(&other->_impl_.vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::C_JOIN*
Arena::CreateMaybeMessage< ::protocol::C_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::S_JOIN*
Arena::CreateMaybeMessage< ::protocol::S_JOIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_JOIN >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::C_LEAVE*
Arena::CreateMaybeMessage< ::protocol::C_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::S_LEAVE*
Arena::CreateMaybeMessage< ::protocol::S_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::C_MOVE*
Arena::CreateMaybeMessage< ::protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::S_MOVE*
Arena::CreateMaybeMessage< ::protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::S_MOVE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
