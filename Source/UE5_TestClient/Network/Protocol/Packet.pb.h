// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace protocol {
class C_Join;
struct C_JoinDefaultTypeInternal;
extern C_JoinDefaultTypeInternal _C_Join_default_instance_;
class C_Leave;
struct C_LeaveDefaultTypeInternal;
extern C_LeaveDefaultTypeInternal _C_Leave_default_instance_;
class C_Move;
struct C_MoveDefaultTypeInternal;
extern C_MoveDefaultTypeInternal _C_Move_default_instance_;
class S_Join;
struct S_JoinDefaultTypeInternal;
extern S_JoinDefaultTypeInternal _S_Join_default_instance_;
class S_Leave;
struct S_LeaveDefaultTypeInternal;
extern S_LeaveDefaultTypeInternal _S_Leave_default_instance_;
class S_Move;
struct S_MoveDefaultTypeInternal;
extern S_MoveDefaultTypeInternal _S_Move_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::C_Join* Arena::CreateMaybeMessage<::protocol::C_Join>(Arena*);
template<> ::protocol::C_Leave* Arena::CreateMaybeMessage<::protocol::C_Leave>(Arena*);
template<> ::protocol::C_Move* Arena::CreateMaybeMessage<::protocol::C_Move>(Arena*);
template<> ::protocol::S_Join* Arena::CreateMaybeMessage<::protocol::S_Join>(Arena*);
template<> ::protocol::S_Leave* Arena::CreateMaybeMessage<::protocol::S_Leave>(Arena*);
template<> ::protocol::S_Move* Arena::CreateMaybeMessage<::protocol::S_Move>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class C_Join final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protocol.C_Join) */ {
 public:
  inline C_Join() : C_Join(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_Join(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Join(const C_Join& from);
  C_Join(C_Join&& from) noexcept
    : C_Join() {
    *this = ::std::move(from);
  }

  inline C_Join& operator=(const C_Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Join& operator=(C_Join&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Join& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Join* internal_default_instance() {
    return reinterpret_cast<const C_Join*>(
               &_C_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Join& a, C_Join& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Join* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Join* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Join>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_Join& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_Join& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_Join";
  }
  protected:
  explicit C_Join(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.C_Join)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_Join final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_Join) */ {
 public:
  inline S_Join() : S_Join(nullptr) {}
  ~S_Join() override;
  explicit PROTOBUF_CONSTEXPR S_Join(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Join(const S_Join& from);
  S_Join(S_Join&& from) noexcept
    : S_Join() {
    *this = ::std::move(from);
  }

  inline S_Join& operator=(const S_Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Join& operator=(S_Join&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Join& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Join* internal_default_instance() {
    return reinterpret_cast<const S_Join*>(
               &_S_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Join& a, S_Join& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Join* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Join* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Join>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Join& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Join& from) {
    S_Join::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Join* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_Join";
  }
  protected:
  explicit S_Join(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_Join)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_Leave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_Leave) */ {
 public:
  inline C_Leave() : C_Leave(nullptr) {}
  ~C_Leave() override;
  explicit PROTOBUF_CONSTEXPR C_Leave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Leave(const C_Leave& from);
  C_Leave(C_Leave&& from) noexcept
    : C_Leave() {
    *this = ::std::move(from);
  }

  inline C_Leave& operator=(const C_Leave& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Leave& operator=(C_Leave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Leave& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Leave* internal_default_instance() {
    return reinterpret_cast<const C_Leave*>(
               &_C_Leave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_Leave& a, C_Leave& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Leave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Leave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Leave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Leave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Leave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Leave& from) {
    C_Leave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Leave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_Leave";
  }
  protected:
  explicit C_Leave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_Leave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_Leave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_Leave) */ {
 public:
  inline S_Leave() : S_Leave(nullptr) {}
  ~S_Leave() override;
  explicit PROTOBUF_CONSTEXPR S_Leave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Leave(const S_Leave& from);
  S_Leave(S_Leave&& from) noexcept
    : S_Leave() {
    *this = ::std::move(from);
  }

  inline S_Leave& operator=(const S_Leave& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Leave& operator=(S_Leave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Leave& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Leave* internal_default_instance() {
    return reinterpret_cast<const S_Leave*>(
               &_S_Leave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Leave& a, S_Leave& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Leave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Leave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Leave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Leave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Leave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Leave& from) {
    S_Leave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Leave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_Leave";
  }
  protected:
  explicit S_Leave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_Leave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_Move) */ {
 public:
  inline C_Move() : C_Move(nullptr) {}
  ~C_Move() override;
  explicit PROTOBUF_CONSTEXPR C_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Move(const C_Move& from);
  C_Move(C_Move&& from) noexcept
    : C_Move() {
    *this = ::std::move(from);
  }

  inline C_Move& operator=(const C_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Move& operator=(C_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Move* internal_default_instance() {
    return reinterpret_cast<const C_Move*>(
               &_C_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_Move& a, C_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Move& from) {
    C_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_Move";
  }
  protected:
  explicit C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kRotateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .protocol.Vector vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::protocol::Vector& vector() const;
  PROTOBUF_NODISCARD ::protocol::Vector* release_vector();
  ::protocol::Vector* mutable_vector();
  void set_allocated_vector(::protocol::Vector* vector);
  private:
  const ::protocol::Vector& _internal_vector() const;
  ::protocol::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::protocol::Vector* vector);
  ::protocol::Vector* unsafe_arena_release_vector();

  // .protocol.Rotate rotate = 3;
  bool has_rotate() const;
  private:
  bool _internal_has_rotate() const;
  public:
  void clear_rotate();
  const ::protocol::Rotate& rotate() const;
  PROTOBUF_NODISCARD ::protocol::Rotate* release_rotate();
  ::protocol::Rotate* mutable_rotate();
  void set_allocated_rotate(::protocol::Rotate* rotate);
  private:
  const ::protocol::Rotate& _internal_rotate() const;
  ::protocol::Rotate* _internal_mutable_rotate();
  public:
  void unsafe_arena_set_allocated_rotate(
      ::protocol::Rotate* rotate);
  ::protocol::Rotate* unsafe_arena_release_rotate();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Vector* vector_;
    ::protocol::Rotate* rotate_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_Move) */ {
 public:
  inline S_Move() : S_Move(nullptr) {}
  ~S_Move() override;
  explicit PROTOBUF_CONSTEXPR S_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Move(const S_Move& from);
  S_Move(S_Move&& from) noexcept
    : S_Move() {
    *this = ::std::move(from);
  }

  inline S_Move& operator=(const S_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Move& operator=(S_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Move* internal_default_instance() {
    return reinterpret_cast<const S_Move*>(
               &_S_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_Move& a, S_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Move& from) {
    S_Move::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_Move";
  }
  protected:
  explicit S_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kRotateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .protocol.Vector vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::protocol::Vector& vector() const;
  PROTOBUF_NODISCARD ::protocol::Vector* release_vector();
  ::protocol::Vector* mutable_vector();
  void set_allocated_vector(::protocol::Vector* vector);
  private:
  const ::protocol::Vector& _internal_vector() const;
  ::protocol::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::protocol::Vector* vector);
  ::protocol::Vector* unsafe_arena_release_vector();

  // .protocol.Rotate rotate = 3;
  bool has_rotate() const;
  private:
  bool _internal_has_rotate() const;
  public:
  void clear_rotate();
  const ::protocol::Rotate& rotate() const;
  PROTOBUF_NODISCARD ::protocol::Rotate* release_rotate();
  ::protocol::Rotate* mutable_rotate();
  void set_allocated_rotate(::protocol::Rotate* rotate);
  private:
  const ::protocol::Rotate& _internal_rotate() const;
  ::protocol::Rotate* _internal_mutable_rotate();
  public:
  void unsafe_arena_set_allocated_rotate(
      ::protocol::Rotate* rotate);
  ::protocol::Rotate* unsafe_arena_release_rotate();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Vector* vector_;
    ::protocol::Rotate* rotate_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Join

// -------------------------------------------------------------------

// S_Join

// int32 id = 1;
inline void S_Join::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_Join::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_Join::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_Join.id)
  return _internal_id();
}
inline void S_Join::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_Join::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_Join.id)
}

// -------------------------------------------------------------------

// C_Leave

// int32 id = 1;
inline void C_Leave::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t C_Leave::_internal_id() const {
  return _impl_.id_;
}
inline int32_t C_Leave::id() const {
  // @@protoc_insertion_point(field_get:protocol.C_Leave.id)
  return _internal_id();
}
inline void C_Leave::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void C_Leave::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.C_Leave.id)
}

// -------------------------------------------------------------------

// S_Leave

// int32 id = 1;
inline void S_Leave::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_Leave::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_Leave::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_Leave.id)
  return _internal_id();
}
inline void S_Leave::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_Leave::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_Leave.id)
}

// -------------------------------------------------------------------

// C_Move

// int32 id = 1;
inline void C_Move::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t C_Move::_internal_id() const {
  return _impl_.id_;
}
inline int32_t C_Move::id() const {
  // @@protoc_insertion_point(field_get:protocol.C_Move.id)
  return _internal_id();
}
inline void C_Move::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void C_Move::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.C_Move.id)
}

// .protocol.Vector vector = 2;
inline bool C_Move::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool C_Move::has_vector() const {
  return _internal_has_vector();
}
inline const ::protocol::Vector& C_Move::_internal_vector() const {
  const ::protocol::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Vector&>(
      ::protocol::_Vector_default_instance_);
}
inline const ::protocol::Vector& C_Move::vector() const {
  // @@protoc_insertion_point(field_get:protocol.C_Move.vector)
  return _internal_vector();
}
inline void C_Move::unsafe_arena_set_allocated_vector(
    ::protocol::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.C_Move.vector)
}
inline ::protocol::Vector* C_Move::release_vector() {
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Vector* C_Move::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:protocol.C_Move.vector)
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::protocol::Vector* C_Move::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::protocol::Vector* C_Move::mutable_vector() {
  ::protocol::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:protocol.C_Move.vector)
  return _msg;
}
inline void C_Move::set_allocated_vector(::protocol::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:protocol.C_Move.vector)
}

// .protocol.Rotate rotate = 3;
inline bool C_Move::_internal_has_rotate() const {
  return this != internal_default_instance() && _impl_.rotate_ != nullptr;
}
inline bool C_Move::has_rotate() const {
  return _internal_has_rotate();
}
inline const ::protocol::Rotate& C_Move::_internal_rotate() const {
  const ::protocol::Rotate* p = _impl_.rotate_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Rotate&>(
      ::protocol::_Rotate_default_instance_);
}
inline const ::protocol::Rotate& C_Move::rotate() const {
  // @@protoc_insertion_point(field_get:protocol.C_Move.rotate)
  return _internal_rotate();
}
inline void C_Move::unsafe_arena_set_allocated_rotate(
    ::protocol::Rotate* rotate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  _impl_.rotate_ = rotate;
  if (rotate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.C_Move.rotate)
}
inline ::protocol::Rotate* C_Move::release_rotate() {
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Rotate* C_Move::unsafe_arena_release_rotate() {
  // @@protoc_insertion_point(field_release:protocol.C_Move.rotate)
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
  return temp;
}
inline ::protocol::Rotate* C_Move::_internal_mutable_rotate() {
  
  if (_impl_.rotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Rotate>(GetArenaForAllocation());
    _impl_.rotate_ = p;
  }
  return _impl_.rotate_;
}
inline ::protocol::Rotate* C_Move::mutable_rotate() {
  ::protocol::Rotate* _msg = _internal_mutable_rotate();
  // @@protoc_insertion_point(field_mutable:protocol.C_Move.rotate)
  return _msg;
}
inline void C_Move::set_allocated_rotate(::protocol::Rotate* rotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  if (rotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate));
    if (message_arena != submessage_arena) {
      rotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotate_ = rotate;
  // @@protoc_insertion_point(field_set_allocated:protocol.C_Move.rotate)
}

// -------------------------------------------------------------------

// S_Move

// int32 id = 1;
inline void S_Move::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_Move::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_Move::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_Move.id)
  return _internal_id();
}
inline void S_Move::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_Move::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_Move.id)
}

// .protocol.Vector vector = 2;
inline bool S_Move::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool S_Move::has_vector() const {
  return _internal_has_vector();
}
inline const ::protocol::Vector& S_Move::_internal_vector() const {
  const ::protocol::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Vector&>(
      ::protocol::_Vector_default_instance_);
}
inline const ::protocol::Vector& S_Move::vector() const {
  // @@protoc_insertion_point(field_get:protocol.S_Move.vector)
  return _internal_vector();
}
inline void S_Move::unsafe_arena_set_allocated_vector(
    ::protocol::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.S_Move.vector)
}
inline ::protocol::Vector* S_Move::release_vector() {
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Vector* S_Move::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:protocol.S_Move.vector)
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::protocol::Vector* S_Move::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::protocol::Vector* S_Move::mutable_vector() {
  ::protocol::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:protocol.S_Move.vector)
  return _msg;
}
inline void S_Move::set_allocated_vector(::protocol::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:protocol.S_Move.vector)
}

// .protocol.Rotate rotate = 3;
inline bool S_Move::_internal_has_rotate() const {
  return this != internal_default_instance() && _impl_.rotate_ != nullptr;
}
inline bool S_Move::has_rotate() const {
  return _internal_has_rotate();
}
inline const ::protocol::Rotate& S_Move::_internal_rotate() const {
  const ::protocol::Rotate* p = _impl_.rotate_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Rotate&>(
      ::protocol::_Rotate_default_instance_);
}
inline const ::protocol::Rotate& S_Move::rotate() const {
  // @@protoc_insertion_point(field_get:protocol.S_Move.rotate)
  return _internal_rotate();
}
inline void S_Move::unsafe_arena_set_allocated_rotate(
    ::protocol::Rotate* rotate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  _impl_.rotate_ = rotate;
  if (rotate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.S_Move.rotate)
}
inline ::protocol::Rotate* S_Move::release_rotate() {
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Rotate* S_Move::unsafe_arena_release_rotate() {
  // @@protoc_insertion_point(field_release:protocol.S_Move.rotate)
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
  return temp;
}
inline ::protocol::Rotate* S_Move::_internal_mutable_rotate() {
  
  if (_impl_.rotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Rotate>(GetArenaForAllocation());
    _impl_.rotate_ = p;
  }
  return _impl_.rotate_;
}
inline ::protocol::Rotate* S_Move::mutable_rotate() {
  ::protocol::Rotate* _msg = _internal_mutable_rotate();
  // @@protoc_insertion_point(field_mutable:protocol.S_Move.rotate)
  return _msg;
}
inline void S_Move::set_allocated_rotate(::protocol::Rotate* rotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  if (rotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate));
    if (message_arena != submessage_arena) {
      rotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotate_ = rotate;
  // @@protoc_insertion_point(field_set_allocated:protocol.S_Move.rotate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
