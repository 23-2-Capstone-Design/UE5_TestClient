// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace protocol {
class C_JOIN;
struct C_JOINDefaultTypeInternal;
extern C_JOINDefaultTypeInternal _C_JOIN_default_instance_;
class C_LEAVE;
struct C_LEAVEDefaultTypeInternal;
extern C_LEAVEDefaultTypeInternal _C_LEAVE_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class S_JOIN;
struct S_JOINDefaultTypeInternal;
extern S_JOINDefaultTypeInternal _S_JOIN_default_instance_;
class S_LEAVE;
struct S_LEAVEDefaultTypeInternal;
extern S_LEAVEDefaultTypeInternal _S_LEAVE_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::C_JOIN* Arena::CreateMaybeMessage<::protocol::C_JOIN>(Arena*);
template<> ::protocol::C_LEAVE* Arena::CreateMaybeMessage<::protocol::C_LEAVE>(Arena*);
template<> ::protocol::C_MOVE* Arena::CreateMaybeMessage<::protocol::C_MOVE>(Arena*);
template<> ::protocol::S_JOIN* Arena::CreateMaybeMessage<::protocol::S_JOIN>(Arena*);
template<> ::protocol::S_LEAVE* Arena::CreateMaybeMessage<::protocol::S_LEAVE>(Arena*);
template<> ::protocol::S_MOVE* Arena::CreateMaybeMessage<::protocol::S_MOVE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class C_JOIN final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protocol.C_JOIN) */ {
 public:
  inline C_JOIN() : C_JOIN(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_JOIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_JOIN(const C_JOIN& from);
  C_JOIN(C_JOIN&& from) noexcept
    : C_JOIN() {
    *this = ::std::move(from);
  }

  inline C_JOIN& operator=(const C_JOIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JOIN& operator=(C_JOIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JOIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JOIN* internal_default_instance() {
    return reinterpret_cast<const C_JOIN*>(
               &_C_JOIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_JOIN& a, C_JOIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JOIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JOIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JOIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JOIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_JOIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_JOIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_JOIN";
  }
  protected:
  explicit C_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.C_JOIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_JOIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_JOIN) */ {
 public:
  inline S_JOIN() : S_JOIN(nullptr) {}
  ~S_JOIN() override;
  explicit PROTOBUF_CONSTEXPR S_JOIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JOIN(const S_JOIN& from);
  S_JOIN(S_JOIN&& from) noexcept
    : S_JOIN() {
    *this = ::std::move(from);
  }

  inline S_JOIN& operator=(const S_JOIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JOIN& operator=(S_JOIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JOIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JOIN* internal_default_instance() {
    return reinterpret_cast<const S_JOIN*>(
               &_S_JOIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_JOIN& a, S_JOIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JOIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JOIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JOIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JOIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_JOIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_JOIN& from) {
    S_JOIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JOIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_JOIN";
  }
  protected:
  explicit S_JOIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_JOIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_LEAVE) */ {
 public:
  inline C_LEAVE() : C_LEAVE(nullptr) {}
  ~C_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR C_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE(const C_LEAVE& from);
  C_LEAVE(C_LEAVE&& from) noexcept
    : C_LEAVE() {
    *this = ::std::move(from);
  }

  inline C_LEAVE& operator=(const C_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE& operator=(C_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE*>(
               &_C_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LEAVE& a, C_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LEAVE& from) {
    C_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_LEAVE";
  }
  protected:
  explicit C_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_LEAVE) */ {
 public:
  inline S_LEAVE() : S_LEAVE(nullptr) {}
  ~S_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE(const S_LEAVE& from);
  S_LEAVE(S_LEAVE&& from) noexcept
    : S_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_LEAVE& operator=(const S_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE& operator=(S_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE*>(
               &_S_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LEAVE& a, S_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LEAVE& from) {
    S_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_LEAVE";
  }
  protected:
  explicit S_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE& from) {
    C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kRotateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .protocol.Vector vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::protocol::Vector& vector() const;
  PROTOBUF_NODISCARD ::protocol::Vector* release_vector();
  ::protocol::Vector* mutable_vector();
  void set_allocated_vector(::protocol::Vector* vector);
  private:
  const ::protocol::Vector& _internal_vector() const;
  ::protocol::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::protocol::Vector* vector);
  ::protocol::Vector* unsafe_arena_release_vector();

  // .protocol.Rotate rotate = 3;
  bool has_rotate() const;
  private:
  bool _internal_has_rotate() const;
  public:
  void clear_rotate();
  const ::protocol::Rotate& rotate() const;
  PROTOBUF_NODISCARD ::protocol::Rotate* release_rotate();
  ::protocol::Rotate* mutable_rotate();
  void set_allocated_rotate(::protocol::Rotate* rotate);
  private:
  const ::protocol::Rotate& _internal_rotate() const;
  ::protocol::Rotate* _internal_mutable_rotate();
  public:
  void unsafe_arena_set_allocated_rotate(
      ::protocol::Rotate* rotate);
  ::protocol::Rotate* unsafe_arena_release_rotate();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Vector* vector_;
    ::protocol::Rotate* rotate_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MOVE& from) {
    S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kRotateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .protocol.Vector vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::protocol::Vector& vector() const;
  PROTOBUF_NODISCARD ::protocol::Vector* release_vector();
  ::protocol::Vector* mutable_vector();
  void set_allocated_vector(::protocol::Vector* vector);
  private:
  const ::protocol::Vector& _internal_vector() const;
  ::protocol::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::protocol::Vector* vector);
  ::protocol::Vector* unsafe_arena_release_vector();

  // .protocol.Rotate rotate = 3;
  bool has_rotate() const;
  private:
  bool _internal_has_rotate() const;
  public:
  void clear_rotate();
  const ::protocol::Rotate& rotate() const;
  PROTOBUF_NODISCARD ::protocol::Rotate* release_rotate();
  ::protocol::Rotate* mutable_rotate();
  void set_allocated_rotate(::protocol::Rotate* rotate);
  private:
  const ::protocol::Rotate& _internal_rotate() const;
  ::protocol::Rotate* _internal_mutable_rotate();
  public:
  void unsafe_arena_set_allocated_rotate(
      ::protocol::Rotate* rotate);
  ::protocol::Rotate* unsafe_arena_release_rotate();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Vector* vector_;
    ::protocol::Rotate* rotate_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_JOIN

// -------------------------------------------------------------------

// S_JOIN

// int32 id = 1;
inline void S_JOIN::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_JOIN::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_JOIN::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_JOIN.id)
  return _internal_id();
}
inline void S_JOIN::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_JOIN::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_JOIN.id)
}

// -------------------------------------------------------------------

// C_LEAVE

// int32 id = 1;
inline void C_LEAVE::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t C_LEAVE::_internal_id() const {
  return _impl_.id_;
}
inline int32_t C_LEAVE::id() const {
  // @@protoc_insertion_point(field_get:protocol.C_LEAVE.id)
  return _internal_id();
}
inline void C_LEAVE::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void C_LEAVE::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.C_LEAVE.id)
}

// -------------------------------------------------------------------

// S_LEAVE

// int32 id = 1;
inline void S_LEAVE::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_LEAVE::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_LEAVE::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_LEAVE.id)
  return _internal_id();
}
inline void S_LEAVE::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_LEAVE::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_LEAVE.id)
}

// -------------------------------------------------------------------

// C_MOVE

// int32 id = 1;
inline void C_MOVE::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t C_MOVE::_internal_id() const {
  return _impl_.id_;
}
inline int32_t C_MOVE::id() const {
  // @@protoc_insertion_point(field_get:protocol.C_MOVE.id)
  return _internal_id();
}
inline void C_MOVE::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void C_MOVE::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.C_MOVE.id)
}

// .protocol.Vector vector = 2;
inline bool C_MOVE::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool C_MOVE::has_vector() const {
  return _internal_has_vector();
}
inline const ::protocol::Vector& C_MOVE::_internal_vector() const {
  const ::protocol::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Vector&>(
      ::protocol::_Vector_default_instance_);
}
inline const ::protocol::Vector& C_MOVE::vector() const {
  // @@protoc_insertion_point(field_get:protocol.C_MOVE.vector)
  return _internal_vector();
}
inline void C_MOVE::unsafe_arena_set_allocated_vector(
    ::protocol::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.C_MOVE.vector)
}
inline ::protocol::Vector* C_MOVE::release_vector() {
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Vector* C_MOVE::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:protocol.C_MOVE.vector)
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::protocol::Vector* C_MOVE::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::protocol::Vector* C_MOVE::mutable_vector() {
  ::protocol::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:protocol.C_MOVE.vector)
  return _msg;
}
inline void C_MOVE::set_allocated_vector(::protocol::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:protocol.C_MOVE.vector)
}

// .protocol.Rotate rotate = 3;
inline bool C_MOVE::_internal_has_rotate() const {
  return this != internal_default_instance() && _impl_.rotate_ != nullptr;
}
inline bool C_MOVE::has_rotate() const {
  return _internal_has_rotate();
}
inline const ::protocol::Rotate& C_MOVE::_internal_rotate() const {
  const ::protocol::Rotate* p = _impl_.rotate_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Rotate&>(
      ::protocol::_Rotate_default_instance_);
}
inline const ::protocol::Rotate& C_MOVE::rotate() const {
  // @@protoc_insertion_point(field_get:protocol.C_MOVE.rotate)
  return _internal_rotate();
}
inline void C_MOVE::unsafe_arena_set_allocated_rotate(
    ::protocol::Rotate* rotate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  _impl_.rotate_ = rotate;
  if (rotate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.C_MOVE.rotate)
}
inline ::protocol::Rotate* C_MOVE::release_rotate() {
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Rotate* C_MOVE::unsafe_arena_release_rotate() {
  // @@protoc_insertion_point(field_release:protocol.C_MOVE.rotate)
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
  return temp;
}
inline ::protocol::Rotate* C_MOVE::_internal_mutable_rotate() {
  
  if (_impl_.rotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Rotate>(GetArenaForAllocation());
    _impl_.rotate_ = p;
  }
  return _impl_.rotate_;
}
inline ::protocol::Rotate* C_MOVE::mutable_rotate() {
  ::protocol::Rotate* _msg = _internal_mutable_rotate();
  // @@protoc_insertion_point(field_mutable:protocol.C_MOVE.rotate)
  return _msg;
}
inline void C_MOVE::set_allocated_rotate(::protocol::Rotate* rotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  if (rotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate));
    if (message_arena != submessage_arena) {
      rotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotate_ = rotate;
  // @@protoc_insertion_point(field_set_allocated:protocol.C_MOVE.rotate)
}

// -------------------------------------------------------------------

// S_MOVE

// int32 id = 1;
inline void S_MOVE::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_MOVE::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_MOVE::id() const {
  // @@protoc_insertion_point(field_get:protocol.S_MOVE.id)
  return _internal_id();
}
inline void S_MOVE::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_MOVE::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.S_MOVE.id)
}

// .protocol.Vector vector = 2;
inline bool S_MOVE::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool S_MOVE::has_vector() const {
  return _internal_has_vector();
}
inline const ::protocol::Vector& S_MOVE::_internal_vector() const {
  const ::protocol::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Vector&>(
      ::protocol::_Vector_default_instance_);
}
inline const ::protocol::Vector& S_MOVE::vector() const {
  // @@protoc_insertion_point(field_get:protocol.S_MOVE.vector)
  return _internal_vector();
}
inline void S_MOVE::unsafe_arena_set_allocated_vector(
    ::protocol::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.S_MOVE.vector)
}
inline ::protocol::Vector* S_MOVE::release_vector() {
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Vector* S_MOVE::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:protocol.S_MOVE.vector)
  
  ::protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::protocol::Vector* S_MOVE::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::protocol::Vector* S_MOVE::mutable_vector() {
  ::protocol::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:protocol.S_MOVE.vector)
  return _msg;
}
inline void S_MOVE::set_allocated_vector(::protocol::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector));
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:protocol.S_MOVE.vector)
}

// .protocol.Rotate rotate = 3;
inline bool S_MOVE::_internal_has_rotate() const {
  return this != internal_default_instance() && _impl_.rotate_ != nullptr;
}
inline bool S_MOVE::has_rotate() const {
  return _internal_has_rotate();
}
inline const ::protocol::Rotate& S_MOVE::_internal_rotate() const {
  const ::protocol::Rotate* p = _impl_.rotate_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Rotate&>(
      ::protocol::_Rotate_default_instance_);
}
inline const ::protocol::Rotate& S_MOVE::rotate() const {
  // @@protoc_insertion_point(field_get:protocol.S_MOVE.rotate)
  return _internal_rotate();
}
inline void S_MOVE::unsafe_arena_set_allocated_rotate(
    ::protocol::Rotate* rotate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  _impl_.rotate_ = rotate;
  if (rotate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.S_MOVE.rotate)
}
inline ::protocol::Rotate* S_MOVE::release_rotate() {
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Rotate* S_MOVE::unsafe_arena_release_rotate() {
  // @@protoc_insertion_point(field_release:protocol.S_MOVE.rotate)
  
  ::protocol::Rotate* temp = _impl_.rotate_;
  _impl_.rotate_ = nullptr;
  return temp;
}
inline ::protocol::Rotate* S_MOVE::_internal_mutable_rotate() {
  
  if (_impl_.rotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Rotate>(GetArenaForAllocation());
    _impl_.rotate_ = p;
  }
  return _impl_.rotate_;
}
inline ::protocol::Rotate* S_MOVE::mutable_rotate() {
  ::protocol::Rotate* _msg = _internal_mutable_rotate();
  // @@protoc_insertion_point(field_mutable:protocol.S_MOVE.rotate)
  return _msg;
}
inline void S_MOVE::set_allocated_rotate(::protocol::Rotate* rotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotate_);
  }
  if (rotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate));
    if (message_arena != submessage_arena) {
      rotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotate_ = rotate;
  // @@protoc_insertion_point(field_set_allocated:protocol.S_MOVE.rotate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
